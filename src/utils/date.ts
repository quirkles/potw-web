import { GamePeriod } from "@/app/store/reducers/gamesReducer";

type Year =
  | "2024"
  | "2025"
  | "2026"
  | "2027"
  | "2028"
  | "2029"
  | "2030"
  | "2031"
  | "2032"
  | "2033"
  | "2034"
  | "2035";
type Month =
  | "01"
  | "02"
  | "03"
  | "04"
  | "05"
  | "06"
  | "07"
  | "08"
  | "09"
  | "10"
  | "11"
  | "12";
type Day =
  | "01"
  | "02"
  | "03"
  | "04"
  | "05"
  | "06"
  | "07"
  | "08"
  | "09"
  | "10"
  | "11"
  | "12"
  | "13"
  | "14"
  | "15"
  | "16"
  | "17"
  | "18"
  | "19"
  | "20"
  | "21"
  | "22"
  | "23"
  | "24"
  | "25"
  | "26"
  | "27"
  | "28"
  | "29"
  | "30"
  | "31";
export type DateString = `${Year}-${Month}-${Day}`;

export function isDateString(date: string): date is DateString {
  return /^2\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])$/.test(date);
}

export function getDateString(date?: string | number | Date): DateString {
  let startDate: Date;
  try {
    startDate = date ? new Date(date) : new Date();
  } catch (e) {
    throw new Error("Invalid date passed to getDateString");
  }
  const year = startDate.getFullYear();
  let month: number | string = startDate.getMonth() + 1;
  let day: number | string = startDate.getDate();
  if (month < 10) {
    month = `0${month}` as Month;
  }
  if (day < 10) {
    day = `0${day}` as Day;
  }
  const dateString = `${year}-${month}-${day}`;
  if (!isDateString(dateString)) {
    throw new Error(
      "Invalid date string generated by getDateString: " + dateString,
    );
  }
  return dateString;
}

export function addTo(
  quantity: number,
  unit: "day" | "month" | "year",
  date: DateString,
): DateString {
  const [year, month, day] = date.split("-").map(Number);
  const newDate = new Date(year, month - 1, day);
  switch (unit) {
    case "day":
      newDate.setDate(newDate.getDate() + quantity);
      break;
    case "month":
      newDate.setMonth(newDate.getMonth() + quantity);
      break;
    case "year":
      newDate.setFullYear(newDate.getFullYear() + quantity);
      break;
  }
  return getDateString(newDate);
}

export function subtractFrom(
  quantity: number,
  unit: "day" | "month" | "year",
  date: DateString,
): DateString {
  return addTo(-quantity, unit, date);
}

export function getDifferenceInDays(
  startDate: DateString,
  endDate: DateString,
  unit: "day" | "month" | "year",
): number {
  const [startYear, startMonth, startDay] = startDate.split("-").map(Number);
  const [endYear, endMonth, endDay] = endDate.split("-").map(Number);
  const start = new Date(startYear, startMonth - 1, startDay);
  const end = new Date(endYear, endMonth - 1, endDay);
  const timeDifference = end.getTime() - start.getTime();
  const daysDifference = timeDifference / (1000 * 3600 * 24);
  switch (unit) {
    case "day":
      return daysDifference;
    case "month":
      return (
        (end.getFullYear() - start.getFullYear()) * 12 +
        end.getMonth() -
        start.getMonth()
      );
    case "year":
      return end.getFullYear() - start.getFullYear();
  }
}

export function getPeriodDisplayText(period: GamePeriod): string {
  if (typeof period === "string") {
    switch (period) {
      case "daily":
        return "Daily";
      case "weekly":
        return "Weekly";
      case "monthly":
        return "Monthly";
      case "biWeekly":
        return "Bi-weekly";
    }
  }
  if ("quantity" in period) {
    switch (period.unit) {
      case "day":
        return `Every ${period.quantity} days`;
      case "week":
        return `Every ${period.quantity} weeks`;
      case "month":
        return `Every ${period.quantity} months`;
    }
  }
  switch (period.recurrence) {
    case "every":
      return `Every ${period.dayOfWeek}`;
    case "everyOther":
      return `Every other ${period.dayOfWeek}`;
  }
}
